(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{689:function(t,a,r){"use strict";r.r(a);var s=r(1),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),r("h2",{attrs:{id:"字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),r("p",[t._v("字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("str1 = 'Hello World!'\nstr2 = \"string\"\n")])]),r("h3",{attrs:{id:"下标索引"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#下标索引","aria-hidden":"true"}},[t._v("#")]),t._v(" 下标索引")]),r("p",[t._v("定义：所谓“下标”，就是编号。通过这个编号就能找到相应的存储空间，下标从 0 开始")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("str1 = 'Hello World!'\n\nprint('str1[0]:',str1[0])\n\n")])]),r("h3",{attrs:{id:"切片"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#切片","aria-hidden":"true"}},[t._v("#")]),t._v(" 切片")]),r("p",[t._v("定义：切片是指对操作的对象截取一部分的操作")]),r("p",[t._v("切片语法： [ 起始 : 结束 : 步长 ]")]),r("p",[r("b",[t._v('注意：选取的区间属于左闭右开型，即从"起始"位开始，到"结束"位的前一位结束（不包含结束位本身)。')])]),r("ul",[r("li",[t._v("如果第一个索引为 0，可以省略")]),r("li",[t._v("支持倒数切片，s[-1]取倒数第一个元素")]),r("li",[t._v("只是通过步长截取可以省略前面两个下标，s[::2]每 2 个取一个")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("str = '0123456789'\n\n# 截取下标1到4的数\nprint(str[1:4])  # 123\n\n# 截取前3位\nprint(str[:3])  # 012\n\n# 截取后3位\nprint(str[-3:])  # 789\n\n# 前5个数，每2个取一个\nprint(str[:5:2])  # 024\n\n# 所有数，每5个取一个\nprint(::5)   # 05\n\n")])]),r("h3",{attrs:{id:"字符串常见操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串常见操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串常见操作")]),r("h4",{attrs:{id:"find"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#find","aria-hidden":"true"}},[t._v("#")]),t._v(" find")]),r("p",[t._v("检索 str 中是否包含某个值，存在返回索引值，否则返回-1")]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),r("p",[t._v("mystr.find(str, start=0, end=len(mystr))")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mystr = 'Hello World!'\n\nmystr.find('Hello')  # 0\nmystr.find('W',0,10)  # 6\n\nmystr.find('hello')  # -1\n")])]),r("h4",{attrs:{id:"index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#index","aria-hidden":"true"}},[t._v("#")]),t._v(" index")]),r("p",[t._v("跟 find()方法一样，只不过如果 str 不在 mystr 中会报一个异常")]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),r("p",[t._v("mystr.index(str, start=0, end=len(mystr))")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mystr = 'Hello World!'\n\nmystr.index('Hello')  # 0\nmystr.index('l',6,10)  # 9\n\nmystr.index('hello')  # 报错了！！\n")])]),r("h4",{attrs:{id:"count"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#count","aria-hidden":"true"}},[t._v("#")]),t._v(" count")]),r("p",[t._v("返回 str 在 start 和 end 之间 在 mystr 里面出现的次数")]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),r("p",[t._v("mystr.count(str, start=0, end=len(mystr))")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mystr = 'Hello World!'\n\nmystr.count('l')  # 3\nmystr.count('c')  # 0\n")])]),r("h4",{attrs:{id:"replace"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#replace","aria-hidden":"true"}},[t._v("#")]),t._v(" replace")]),r("p",[t._v("把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.")]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),r("p",[t._v("mystr.replace(str1, str2, mystr.count(str1))")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mystr = 'Hello World! ha ha'\n\nmystr.replace('ha','HA')   # 'Hello World! HA HA'\nmystr.replace('ha','HA',1)  # 'Hello World! HA ha'\n")])]),r("h4",{attrs:{id:"split"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#split","aria-hidden":"true"}},[t._v("#")]),t._v(" split")]),r("p",[t._v("split()通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则仅分隔 num+1 个子字符串")]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),r("p",[t._v('mystr.split(str="", num=string.count(str))')])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("mystr = 'Hello World! ha ha'\n\nmystr.split(' ')  # ['Hello', 'World!', 'ha', 'ha']\n\nmystr.split(' ',2)  # ['Hello', 'World!', 'haha']\n\n")])]),r("h3",{attrs:{id:"capitalize"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#capitalize","aria-hidden":"true"}},[t._v("#")]),t._v(" capitalize")]),r("p",[t._v("把字符串的第一个字符大写")]),r("h3",{attrs:{id:"title"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#title","aria-hidden":"true"}},[t._v("#")]),t._v(" title")]),r("p",[t._v("把字符串的每个单词首字母大写")]),r("h3",{attrs:{id:"startswith"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#startswith","aria-hidden":"true"}},[t._v("#")]),t._v(" startswith")]),r("p",[t._v("检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False")]),r("h3",{attrs:{id:"endswith"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#endswith","aria-hidden":"true"}},[t._v("#")]),t._v(" endswith")]),r("p",[t._v("检查字符串是否以 obj 结束，如果是返回 True,否则返回 False.")]),r("h3",{attrs:{id:"lower"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lower","aria-hidden":"true"}},[t._v("#")]),t._v(" lower")]),r("p",[t._v("转换 mystr 中所有大写字符为小写")]),r("h3",{attrs:{id:"upper"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#upper","aria-hidden":"true"}},[t._v("#")]),t._v(" upper")]),r("p",[t._v("转换 mystr 中所有小写字符为大写")]),r("h3",{attrs:{id:"upper-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#upper-2","aria-hidden":"true"}},[t._v("#")]),t._v(" upper")]),r("p",[t._v("删除 mystr 字符串两端的空白字符")]),r("h2",{attrs:{id:"数字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数字","aria-hidden":"true"}},[t._v("#")]),t._v(" 数字")]),r("p",[t._v("Python 数字数据类型用于存储数值。")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("num1 = 1\nnum2 = 10\n")])]),r("ul",[r("li",[t._v("整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。")]),r("li",[t._v("浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）")]),r("li",[t._v("复数( (complex)) - 复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b)表示， 复数的实部 a 和虚部 b 都是浮点型。")])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("\n")])]),r("h2",{attrs:{id:"布尔值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#布尔值","aria-hidden":"true"}},[t._v("#")]),t._v(" 布尔值")]),r("h2",{attrs:{id:"列表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表")]),r("h2",{attrs:{id:"元组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#元组","aria-hidden":"true"}},[t._v("#")]),t._v(" 元组")]),r("h2",{attrs:{id:"字典"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字典","aria-hidden":"true"}},[t._v("#")]),t._v(" 字典")])])}],!1,null,null,null);a.default=e.exports}}]);