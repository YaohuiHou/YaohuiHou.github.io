(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{687:function(t,a,e){"use strict";e.r(a);var r=e(1),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"基础语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础语法")]),e("h2",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释","aria-hidden":"true"}},[t._v("#")]),t._v(" 注释")]),e("p",[t._v("作用：通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性")]),e("ul",[e("li",[t._v("单行注释以 # 开头，#右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用")]),e("li",[t._v("多行注释 用三个单引号 ''' 或者三个双引号 \"\"\" 将注释括起来")])]),e("p",[t._v("单行注释")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 这里写的就是注释\n# 这里写的就是注释\n")])]),e("p",[t._v("多行注释")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 单引号\n'''\n这里是单引号注释的内容\n在这里可以写很多你想要表明的内容\n没有限制，和双引号作用一样\n'''\n\n# 双引号\n\"\"\"\n这里是双引号注释的内容\n在这里可以写很多你想要表明的内容\n没有限制，和单引号作用一样\n\"\"\"\n\n")])]),e("h2",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量")]),e("p",[t._v("定义：变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。（变量名必须是大小写英文、数字和_的组合，且不能用数字开头）")]),e("ul",[e("li",[t._v("每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建")]),e("li",[t._v('变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。')]),e("li",[t._v("等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 定义一个变量\nage = 12\nname1 = 'Tom'\nchina_city = '北京'\nJob = 'student'\n\n")])]),e("p",[t._v("多个变量赋值")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 同时为多个变量赋值相同的值\na = b = c = 1\n\n# 同时为多个变量赋值不同的值\na,b,c = 1,2,'cc'\n\n")])]),e("h2",{attrs:{id:"常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量","aria-hidden":"true"}},[t._v("#")]),t._v(" 常量")]),e("p",[t._v("定义：所谓常量就是不能变的变量，比如常用的数学常数 π 就是一个常量。在 Python 中，通常用全部大写的变量名表示常量")]),e("ul",[e("li",[t._v("Python 根本没有任何机制保证常量不会被改变，所以用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变常量的值，也没人能拦住你。")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("PI = 3.14159265359\n\n")])]),e("h2",{attrs:{id:"标识符和关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字","aria-hidden":"true"}},[t._v("#")]),t._v(" 标识符和关键字")]),e("h3",{attrs:{id:"标识符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标识符","aria-hidden":"true"}},[t._v("#")]),t._v(" 标识符")]),e("p",[t._v("定义：开发人员在程序中自定义的一些符号和名称；标示符是自己定义的,如变量名 、函数名等")]),e("p",[t._v("标示符由字母、下划线和数字组成，且数字不能开头")]),e("ul",[e("li",[t._v("见名知意\n起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义学生 用 student")]),e("li",[t._v("驼峰命名法\n使用首字母大小写的方式来命名，例如：FirstName 、 myList ...")]),e("li",[t._v("其他命名法\n用下划线“_”来连接所有的单词，比如 send_buf")])]),e("h3",{attrs:{id:"关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关键字","aria-hidden":"true"}},[t._v("#")]),t._v(" 关键字")]),e("p",[t._v("定义：关键字，是 python 已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 可以查看关键字有哪些\nimport keyword\n\nprint(keyword.kwlist)\n# ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n")])]),e("h2",{attrs:{id:"输出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输出","aria-hidden":"true"}},[t._v("#")]),t._v(" 输出")]),e("p",[t._v("\b 使用 print(),在括号中添加字符串，就可以在控制台输出")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("print('Hello World')\n")])]),e("p",[t._v("print() 可以接受多个字符串，使用逗号隔开")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("print('Hello World','这里是编程的世界')\n")])]),e("p",[t._v("print() 可以直接输出整数 或者计算结果")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("print(100)\n\nprint(100+120)\n\nprint('100 + 120 =',100+120)\n")])]),e("h2",{attrs:{id:"输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输入","aria-hidden":"true"}},[t._v("#")]),t._v(" 输入")]),e("p",[t._v("使用 input() 可以直接让用户输入字符串，并存放到一个变量中。")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("name = input()\n# Michael\n\n")])]),e("p",[t._v("可以输入、输出")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 可以直接获取name\nname = input()\nprint('hello ',name)\nhello Michael\n\n")])]),e("p",[t._v("input() 中还可以有一些提示语")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("name = input('你好，请输入你的姓名。')\n")])]),e("h2",{attrs:{id:"运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 运算符")]),e("h3",{attrs:{id:"算术运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 算术运算符")]),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),e("th",[t._v("描述")]),e("th",[t._v("实例")])])]),e("tbody",[e("tr",[e("td",[t._v("+")]),e("td",[t._v("加")]),e("td",[t._v("两个对象相加 a + b 输出结果 30")])]),e("tr",[e("td",[t._v("-")]),e("td",[t._v("减")]),e("td",[t._v("得到负数或是一个数减去另一个数 a - b 输出结果 -10")])]),e("tr",[e("td",[t._v("*")]),e("td",[t._v("乘")]),e("td",[t._v("两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200")])]),e("tr",[e("td",[t._v("/")]),e("td",[t._v("除")]),e("td",[t._v("x 除以 y b / a 输出结果 2")])]),e("tr",[e("td",[t._v("//")]),e("td",[t._v("取整除")]),e("td",[t._v("返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0")])]),e("tr",[e("td",[t._v("%")]),e("td",[t._v("取余")]),e("td",[t._v("返回除法的余数 b % a 输出结果 0")])]),e("tr",[e("td",[t._v("**")]),e("td",[t._v("幂")]),e("td",[t._v("返回 x 的 y 次幂 a**b 为 10 的 20 次方， 输出结果 100000000000000000000")])])])]),e("h3",{attrs:{id:"赋值运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 赋值运算符")]),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),e("th",[t._v("描述")]),e("th",[t._v("实例")])])]),e("tbody",[e("tr",[e("td",[t._v("=")]),e("td",[t._v("赋值运算符")]),e("td",[t._v("把=号右边的结果给左边的变量 num=1+2*3 结果 num 的值为 7")])])])]),e("h3",{attrs:{id:"复合赋值运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复合赋值运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 复合赋值运算符")]),e("table",[e("thead",[e("tr",[e("th",[t._v("运算符")]),e("th",[t._v("描述")]),e("th",[t._v("实例")])])]),e("tbody",[e("tr",[e("td",[t._v("+=")]),e("td",[t._v("加法赋值运算符")]),e("td",[t._v("c += a 等效于 c = c + a")])]),e("tr",[e("td",[t._v("-=")]),e("td",[t._v("减法赋值运算符")]),e("td",[t._v("c -= a 等效于 c = c - a")])]),e("tr",[e("td",[t._v("*=")]),e("td",[t._v("乘法赋值运算符")]),e("td",[t._v("c = a 等效于 c = c a")])]),e("tr",[e("td",[t._v("/=")]),e("td",[t._v("除法赋值运算符")]),e("td",[t._v("c /= a 等效于 c = c / a")])]),e("tr",[e("td",[t._v("%=")]),e("td",[t._v("取模赋值运算符")]),e("td",[t._v("c %= a 等效于 c = c % a")])]),e("tr",[e("td",[t._v("**=")]),e("td",[t._v("幂赋值运算符")]),e("td",[t._v("c = a 等效于 c = c a")])]),e("tr",[e("td",[t._v("//=")]),e("td",[t._v("取整除赋值运算符")]),e("td",[t._v("c //= a 等效于 c = c // a")])])])])])}],!1,null,null,null);a.default=n.exports}}]);