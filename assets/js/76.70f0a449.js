(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{305:function(t,a,s){"use strict";s.r(a);var n=s(1),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h2",{attrs:{id:"_01-创建对象和原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-创建对象和原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 01.创建对象和原型链")]),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),s("h3",{attrs:{id:"面向对象的三大特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的三大特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向对象的三大特性")]),s("ul",[s("li",[s("p",[t._v("封装")])]),s("li",[s("p",[t._v("继承")])]),s("li",[s("p",[t._v("多态")])])]),s("h3",{attrs:{id:"原型链的知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链的知识","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链的知识")]),s("p",[t._v("原型链是面向对象的基础，是非常重要的部分。有以下几种知识：")]),s("ul",[s("li",[s("p",[t._v("创建对象有几种方法")])]),s("li",[s("p",[t._v("原型、构造函数、实例、原型链")])]),s("li",[s("p",[s("code",[t._v("instanceof")]),t._v("的原理")])]),s("li",[s("p",[t._v("new 运算符")])])]),s("h2",{attrs:{id:"创建对象有几种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象有几种方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建对象有几种方法")]),s("h3",{attrs:{id:"方式一：字面量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一：字面量","aria-hidden":"true"}},[t._v("#")]),t._v(" 方式一：字面量")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj11 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'qianguyihao'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj12 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'qianguyihao'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//内置对象（内置的构造函数）")]),t._v("\n")])]),s("p",[t._v("上面的两种写法，效果是一样的。因为，第一种写法，"),s("code",[t._v("obj11")]),t._v("会指向"),s("code",[t._v("Object")]),t._v("。")]),s("ul",[s("li",[s("p",[t._v("第一种写法是：字面量的方式。")])]),s("li",[s("p",[t._v("第二种写法是：内置的构造函数")])])]),s("h3",{attrs:{id:"方式二：通过构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二：通过构造函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 方式二：通过构造函数")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{attrs:{class:"token function-variable function"}},[t._v("M")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("this")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj3 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("M")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'smyhvae'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),s("h3",{attrs:{id:"方法三：object-create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法三：object-create","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法三：Object.create")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token string"}},[t._v("'smyhvae'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj3 "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("create")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{attrs:{class:"token comment"}},[t._v("//此方法创建的对象，是用原型链连接的")]),t._v("\n")])]),s("p",[t._v("第三种方法，很少有人能说出来。这种方式里，obj3是实例，p是obj3的原型（name是p原型里的属性），构造函数是"),s("code",[t._v("Objecet")]),t._v(" 。")]),s("p",[s("img",{attrs:{src:"http://img.smyhvae.com/20180306_1633.png",alt:""}})]),s("h2",{attrs:{id:"原型、构造函数、实例，以及原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型、构造函数、实例，以及原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型、构造函数、实例，以及原型链")]),s("p",[s("img",{attrs:{src:"http://img.smyhvae.com/20180306_1540.png",alt:""}})]),s("p",[t._v("PS：任何一个函数，如果在前面加了new，那就是构造函数。")]),s("h3",{attrs:{id:"原型、构造函数、实例三者之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型、构造函数、实例三者之间的关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型、构造函数、实例三者之间的关系")]),s("p",[s("img",{attrs:{src:"http://img.smyhvae.com/20180306_2107.png",alt:""}})]),s("ul",[s("li",[s("p",[t._v("1、构造函数通过 new 生成实例")])]),s("li",[s("p",[t._v("2、构造函数也是函数，构造函数的"),s("code",[t._v("prototype")]),t._v("指向原型。（所有的函数有"),s("code",[t._v("prototype")]),t._v("属性，但实例没有 "),s("code",[t._v("prototype")]),t._v("属性）")])]),s("li",[s("p",[t._v("3、原型对象中有 constructor，指向该原型的构造函数。")])])]),s("p",[t._v("上面的三行，代码演示：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    var Foo = function (name) {\n        this.name = name;\n    }\n\n    var foo = new Foo('smyhvae');\n")])]),s("p",[t._v("上面的代码中，"),s("code",[t._v("Foo.prototype.constructor === Foo")]),t._v("的结果是"),s("code",[t._v("true")]),t._v("：")]),s("p",[s("img",{attrs:{src:"http://img.smyhvae.com/20180306_2120.png",alt:""}})]),s("ul",[s("li",[t._v("4、实例的"),s("code",[t._v("__proto__")]),t._v("指向原型。也就是说，"),s("code",[t._v("foo.__proto__ === Foo.prototype")]),t._v("。")])]),s("p",[t._v("声明：所有的"),s("strong",[t._v("引用类型")]),t._v("（数组、对象、函数）都有"),s("code",[t._v("__proto__")]),t._v("这个属性。")]),s("p",[s("code",[t._v("Foo.__proto__ === Function.prototype")]),t._v("的结果为true，说明Foo这个普通的函数，是Function构造函数的一个实例。")]),s("h3",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链")]),s("p",[s("strong",[t._v("原型链的基本原理")]),t._v("：任何一个"),s("strong",[t._v("实例")]),t._v("，通过原型链，找到它上面的"),s("strong",[t._v("原型")]),t._v("，该原型对象中的方法和属性，可以被所有的原型实例共享。")]),s("p",[t._v("Object是原型链的顶端。")]),s("p",[t._v("原型可以起到继承的作用。原型里的方法都可以被不同的实例共享：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    //给Foo的原型添加 say 函数\n    Foo.prototype.say = function () {\n        console.log('');\n    }\n")])]),s("p",[s("strong",[t._v("原型链的关键")]),t._v("：在访问一个实例的时候，如果实例本身没找到此方法或属性，就往原型上找。如果还是找不到，继续往上一级的原型上找。")]),s("h3",{attrs:{id:"instanceof的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof的原理","aria-hidden":"true"}},[t._v("#")]),s("code",[t._v("instanceof")]),t._v("的原理")]),s("p",[s("img",{attrs:{src:"http://img.smyhvae.com/20180306_2209.png",alt:""}})]),s("p",[s("code",[t._v("instanceof")]),t._v("的"),s("strong",[t._v("作用")]),t._v("：用于判断"),s("strong",[t._v("实例")]),t._v("属于哪个"),s("strong",[t._v("构造函数")]),t._v("。")]),s("p",[s("code",[t._v("instanceof")]),t._v("的"),s("strong",[t._v("原理")]),t._v("：判断实例对象的"),s("code",[t._v("__proto__")]),t._v("属性，和构造函数的"),s("code",[t._v("prototype")]),t._v("属性，是否为同一个引用（是否指向同一个地址）。")]),s("p",[s("strong",[t._v("注意1")]),t._v("：虽然说，实例是由构造函数 new 出来的，但是实例的"),s("code",[t._v("__proto__")]),t._v("属性引用的是构造函数的"),s("code",[t._v("prototype")]),t._v("。也就是说，实例的"),s("code",[t._v("__proto__")]),t._v("属性与构造函数本身无关。")]),s("p",[s("strong",[t._v("注意2")]),t._v("：在原型链上，原型的上面可能还会有原型，以此类推往上走，继续找"),s("code",[t._v("__proto__")]),t._v("属性。这条链上如果能找到， instanceof 的返回结果也是 true。")]),s("p",[t._v("比如说：")]),s("ul",[s("li",[s("p",[s("code",[t._v("foo instance of Foo")]),t._v("的结果为true，因为"),s("code",[t._v("foo.__proto__ === Foo.prototype")]),t._v("为true。")])]),s("li",[s("p",[s("strong",[s("code",[t._v("foo instance of Objecet")]),t._v("的结果也为true")]),t._v("，因为"),s("code",[t._v("Foo.prototype.__proto__ === Object.prototype")]),t._v("为true。")])])]),s("p",[t._v("但我们不能轻易的说："),s("code",[t._v("foo 一定是 由Object创建的实例")]),t._v("。这句话是错误的。我们来看下一个问题就明白了。")]),s("h3",{attrs:{id:"分析一个问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析一个问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析一个问题")]),s("p",[s("strong",[t._v("问题："),s("strong",[t._v("已知A继承了B，B继承了C。怎么判断 a 是由A")]),t._v("直接生成")]),t._v("的实例，还是B直接生成的实例呢？还是C直接生成的实例呢？")]),s("p",[t._v("分析：这就要用到原型的"),s("code",[t._v("constructor")]),t._v("属性了。")]),s("ul",[s("li",[s("code",[t._v("foo.__proto__.constructor === Foo")]),t._v("的结果为true，但是 "),s("code",[t._v("foo.__proto__.constructor === Object")]),t._v("的结果为false。")])]),s("p",[t._v("所以，用 consturctor判断就比用 instanceof判断，更为严谨。")]),s("h2",{attrs:{id:"new-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" new 运算符")]),s("p",[t._v("当new Foo()时发生了什么：")]),s("p",[t._v("（1）创建一个"),s("strong",[t._v("新的空对象实例")]),t._v("。")]),s("p",[t._v("（2）将此空对象的隐式原型指向其构造函数的显示原型。")]),s("p",[t._v("（3）执行构造函数（传入相应的参数，如果没有参数就不用传），同时 this 指向这个新实例。")]),s("p",[t._v("（4）如果返回值是一个新对象，那么直接返回该对象；如果无返回值或者返回一个非对象值，那么就将步骤（1）创建的对象返回。")]),s("p",[t._v("参考《JS高程》6.2.2")]),s("h2",{attrs:{id:"类继承和原型继承的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类继承和原型继承的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 类继承和原型继承的区别")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\n\n\n\n\n")])])])}],!1,null,null,null);a.default=o.exports}}]);