(window.webpackJsonp=window.webpackJsonp||[]).push([[259],{488:function(t,e,a){"use strict";a.r(e);var r=a(1),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"git的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" Git的使用")]),a("h2",{attrs:{id:"常见操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见操作")]),a("h3",{attrs:{id:"全局配置用户信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局配置用户信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局配置用户信息")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git config --global user.name "smyhvae"\n\ngit config --global user.email "smyhvae@163.com"\n')])]),a("h2",{attrs:{id:"分支的合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支的合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支的合并")]),a("h3",{attrs:{id:"场景：基于master分支的代码，开发一个新的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景：基于master分支的代码，开发一个新的特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 场景：基于master分支的代码，开发一个新的特性")]),a("p",[t._v("如果你直接在master分支上开发这个新特性，是不好的，万一你在开发"),a("code",[t._v("特性1")]),t._v("的时候，领导突然又要叫你去开发"),a("code",[t._v("特性2")]),t._v("，就不好处理了。难道开发的两个特性都提交到master？一会儿提交特性1的commit，一会儿提交特性2的commit？这会导致commit记录很混乱。")]),a("p",[t._v("所以，我给你的建议做法是：给每个特性都单独建一个的新的分支。")]),a("p",[t._v("比如说，我专门给"),a("code",[t._v("特性1")]),t._v("建一个分支"),a("code",[t._v("feature_item_recommend")]),t._v("。具体做法如下：")]),a("p",[t._v("（1）基于master分支，创建一个新的分支，起名为"),a("code",[t._v("feature_item_recommend")]),t._v("：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -b feature_item_recommend\n\nSwitched to a new branch 'feature_item_recommend'\n")])]),a("p",[t._v("上面这行命令，相当于：")]),a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" branch feature_item_recommend    // 创建新的分支\n\n$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature_item_recommend  //切换到新的分支\n")])]),a("p",[t._v("（2）在新的分支"),a("code",[t._v("feature_item_recommend")]),t._v("上，完成开发工作，并 commit 、push。")]),a("p",[t._v("（3）将分支"),a("code",[t._v("feature_item_recommend")]),t._v("上的开发进度"),a("strong",[t._v("合并")]),t._v("到master分支：")]),a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master  //切换到master分支\n\n$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature_item_recommend    //将分支 feature_item_recommend 的开发进度合并到 master 分支\n\n")])]),a("p",[t._v("合并之后，"),a("code",[t._v("master")]),t._v("分支和"),a("code",[t._v("feature_item_recommend")]),t._v("分支会指向同一个位置。")]),a("p",[t._v("（3）删除分支"),a("code",[t._v("feature_item_recommend")]),t._v("：")]),a("blockquote",[a("p",[t._v("既然 特性1 开发完了，也放心地提交到master了，那我们就可以将这个分支删除了。")])]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch -d feature_item_recommend\n")])]),a("p",[t._v("注意，我们当前是处于"),a("code",[t._v("master")]),t._v("分支的位置，来删除"),a("code",[t._v("feature_item_recommend")]),t._v("分支。如果当前是处于"),a("code",[t._v("feature_item_recommend")]),t._v("分支，是没办法删除它自己的。")]),a("p",[t._v("同理，当我转身去开发"),a("code",[t._v("特性2")]),t._v("的时候，也是采用同样的步骤。")]),a("h3",{attrs:{id:"合并分支时，如果存在分叉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并分支时，如果存在分叉","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并分支时，如果存在分叉")]),a("p",[a("img",{attrs:{src:"http://img.smyhvae.com/20180610_1650.png",alt:""}})]),a("p",[t._v("比如说上面这张图中，最早的时候，master分支是位于"),a("code",[t._v("C2")]),t._v("节点。我基于"),a("code",[t._v("C2")]),t._v("节点，new出一个新的分支"),a("code",[t._v("iss53")]),t._v("，我在"),a("code",[t._v("iss53")]),t._v("上提交了好几个commit。")]),a("p",[t._v("现在，我准备把"),a("code",[t._v("iss53")]),t._v("上的几个commit合并到master上，此时发现，master分支已经前进到C4了。那该怎么合并呢？")]),a("p",[t._v("合并的命令仍然是：")]),a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\n$ "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" merge iss53\n")])]),a("p",[a("strong",[t._v("解释")]),t._v("：")]),a("p",[t._v("这次合并的实现，并不同于简单的并入方式。这一次，我的开发历史是从更早的地方开始分叉的。")]),a("p",[t._v("由于当前 master 分支所指向的commit (C4)并非想要并入分支（iss53）的直接祖先，Git 不得不进行一些处理。就此例而言，Git 会用两个分支的末端（C4 和C5）和它们的共同祖先（C2）进行一次简单的三方合并计算。")]),a("p",[t._v("Git 没有简单地把分支指针右移，而是对三方合并的结果作一新的快照，并自动创建一个指向它的commit（C6）（如下图所示）。我们把这个特殊的commit 称作合并提交（mergecommit），因为它的祖先不止一个。")]),a("p",[t._v("值得一提的是Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和CVS 或Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让Git 的合并操作比其他系统都要简单不少。")]),a("p",[a("img",{attrs:{src:"http://img.smyhvae.com/20180610_1710.png",alt:""}})]),a("h3",{attrs:{id:"解决合并时发生的冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决合并时发生的冲突","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决合并时发生的冲突")]),a("p",[a("img",{attrs:{src:"http://img.smyhvae.com/20180610_1740.png",alt:""}})]),a("p",[t._v("如果 feature1和feature2修改的是同一个文件中"),a("strong",[t._v("代码的同一个位置")]),t._v("，那么，把feature1合并到feature2时，就会产生冲突。这个冲突需要人工解决。步骤如下：")]),a("p",[t._v("（1）手动修改文件：手动修改冲突的那个文件，决定到底要用哪个分支的代码。")]),a("p",[t._v("（2）git add：解决好冲突后，输入"),a("code",[t._v("git status")]),t._v("，会提示"),a("code",[t._v("Unmerged paths")]),t._v("。这个时候，输入"),a("code",[t._v("git add")]),t._v("即可，表示："),a("strong",[t._v("修改冲突成功，加入暂存区")]),t._v("。")]),a("p",[t._v("（3）git commit 提交。")]),a("p",[t._v("然后，我们可以继续把 feature1 分支合并到 master分支，最后删除feature1、feature2。")]),a("p",[a("strong",[t._v("注意")]),t._v("：两个分支的同一个文件的不同地方合并时，git会自动合并，不会产生冲突。")]),a("p",[t._v("比如分支feture1对index.html原来的第二行之前加入了一段代码。\n分支feature2对index.html在原来的最后一行的后面加入了一段代码。\n这个时候在对两个分支合并，git不会产生冲突，因为两个分支是修改同一文件的不同位置。\ngit自动合并成功。不管是git自动合并成功，还是在人工解决冲突下合并成功，提交之前，都要对代码进行测试。")]),a("h2",{attrs:{id:"日常操作积累"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日常操作积累","aria-hidden":"true"}},[t._v("#")]),t._v(" 日常操作积累")]),a("h3",{attrs:{id:"修改密码（曲线救国）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改密码（曲线救国）","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改密码（曲线救国）")]),a("blockquote",[a("p",[t._v("网上查了很久，没找到答案。最终，在cld童鞋的提示下，采取如下方式进行曲线救国。")])]),a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# 设置当前仓库的用户名为空")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config  user.name "),a("span",{attrs:{class:"token string"}},[t._v('""')]),t._v("\n")])]),a("p",[t._v("然后，当我们再输入"),a("code",[t._v("git pull")]),t._v("等命令行时，就会被要求重新输入"),a("em",[t._v("新的")]),t._v("账号密码。此时，密码就可以修改成功了。最后，我们还要输入如下命令，还原当前仓库的用户名：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git config user.name "smyhvae"\n')])]),a("h3",{attrs:{id:"修改已经push的某次commit的作者信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改已经push的某次commit的作者信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改已经push的某次commit的作者信息")]),a("p",[t._v("已经push的记录，如果要修改作者信息的话，只能 通过--force命令。我反正是查了很久，但最终还是不敢用公司的仓库尝试。")]),a("p",[t._v("参考链接：")]),a("ul",[a("li",[a("a",{attrs:{href:"https://segmentfault.com/q/1010000006999861",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 修改已提交的某一次的邮箱和用户信息")])])]),a("p",[t._v("看最后一条答案。")]),a("ul",[a("li",[a("a",{attrs:{href:"http://baurine.github.io/2015/08/22/git_update_author.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改 git repo 历史提交的 author")])])]),a("h3",{attrs:{id:"将-branch1的某个commit1合并到branch2当中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-branch1的某个commit1合并到branch2当中","aria-hidden":"true"}},[t._v("#")]),t._v(" 将 "),a("code",[t._v("branch1")]),t._v("的某个"),a("code",[t._v("commit1")]),t._v("合并到"),a("code",[t._v("branch2")]),t._v("当中")]),a("p",[t._v("切换到branch2中，然后执行如下命令：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git cherry-pick commit1\n")])]),a("h3",{attrs:{id:"_20190118-修改github已提交的用户名和邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20190118-修改github已提交的用户名和邮箱","aria-hidden":"true"}},[t._v("#")]),t._v(" 20190118-修改GitHub已提交的用户名和邮箱")]),a("p",[t._v("参考链接：（亲测有效）")]),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1352623",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改Git全部Commit提交记录的用户名Name和邮箱Email")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/yusufolu9/article/details/53706269",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mac 运行sh文件，也就是传说中的shell脚本")])])])]),a("p",[t._v("在执行"),a("code",[t._v("./email.sh")]),t._v("后，如果出现"),a("code",[t._v("permission denied")]),t._v("的错误，可以先执行"),a("code",[t._v("chmod 777 email.sh")]),t._v("，修改文件的权限。")]),a("h2",{attrs:{id:"git客户端推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git客户端推荐","aria-hidden":"true"}},[t._v("#")]),t._v(" git客户端推荐")]),a("p",[t._v("市面上的Git客户端我基本都用过了，我最推荐的一款Git客户端是："),a("a",{attrs:{href:"https://www.git-tower.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tower")]),t._v(" 或者 "),a("a",{attrs:{href:"https://git-fork.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fork")]),t._v("。")]),a("ul",[a("li",[t._v("GitUp："),a("a",{attrs:{href:"https://gitup.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitup.co/")])])]),a("p",[t._v("20180623时，网上看了下Git客户端的推荐排名：")]),a("p",[a("img",{attrs:{src:"http://img.smyhvae.com/20180623_1210.png",alt:""}})]),a("p",[a("strong",[t._v("SmartGit")]),t._v("：")]),a("p",[t._v("商业用途收费， 个人用户免费：\ns\n"),a("img",{attrs:{src:"http://img.smyhvae.com/20180623_1305.png",alt:""}})]),a("h2",{attrs:{id:"推荐书籍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐书籍","aria-hidden":"true"}},[t._v("#")]),t._v(" 推荐书籍")]),a("ul",[a("li",[t._v("《pro.git中文版》")])]),a("h2",{attrs:{id:"推荐连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 推荐连接")]),a("h3",{attrs:{id:"_2018-06"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2018-06","aria-hidden":"true"}},[t._v("#")]),t._v(" 2018-06")]),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/wangiqngpei557/p/6056624.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("聊下git pull --rebase")])])])])}],!1,null,null,null);e.default=s.exports}}]);